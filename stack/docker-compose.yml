services:
  traefik:
    image: traefik:latest
    container_name: n8n-traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"

  #    - --providers.docker=true
  #    - --providers.docker.exposedbydefault=false
  #    - --entrypoints.web.address=:80
  #    - --entrypoints.web.http.redirections.entryPoint.to=websecure
  #    - --entrypoints.web.http.redirections.entrypoint.scheme=https
  #    - --entrypoints.websecure.address=:443
  #    - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true
  #    - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
  #    - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
  #   - --certificatesresolvers.le.acme.tlschallenge=true
  #    - --api.dashboard=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # traefik dashboard
    volumes:
      - traefik_letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../secrets:/run/secrets:ro
    environment:
      - TZ=${TZ}
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      traefik.http.routers.traefik.rule: "Host(`traefik.${DOMAIN_NAME}`)"
      traefik.http.routers.traefik.entrypoints: "websecure"
      traefik.http.routers.traefik.tls.certresolver: "mytlschallenge"
      traefik.http.services.traefik.loadbalancer.server.port: "8080"
    networks:
      - proxy

  n8n-postgres:
    image: postgres:16-alpine
    container_name: n8n-postgres
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD_FILE=/run/secrets/n8n_db_password
    volumes:
      - n8n_pgdata:/var/lib/postgresql/data
      - ../secrets:/run/secrets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    networks:
      - backend

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    environment:
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/n8n_db_password
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - N8N_RUNNERS_ENABLED=true
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - TZ=${GENERIC_TIMEZONE}
      - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    volumes:
      - n8n_data:/home/node/.n8n
      - ../secrets:/run/secrets:ro
      - ./local-files:/files
#    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - n8n-postgres
    networks:
      - proxy
      - backend

  ollama:
    image: ollama/ollama:latest
    container_name: n8n-ollama
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - backend

  pgvector:
    image: pgvector/pgvector:pg16
    container_name: n8n-pgvector
    environment:
      - POSTGRES_DB=lightrag
      - POSTGRES_USER=lightrag
      - POSTGRES_PASSWORD_FILE=/run/secrets/pgvector_password
    volumes:
      - pgvectordata:/var/lib/postgresql/data
      - ../pgvector_init:/docker-entrypoint-initdb.d:ro
      - ../secrets:/run/secrets:ro
    networks:
      - backend

networks:
  proxy:
    name: proxy
    driver: bridge
  backend:
    name: backend
    driver: bridge

volumes:
  traefik_letsencrypt:
  n8n_pgdata:
  n8n_data:
  ollama_data:
  pgvectordata:
