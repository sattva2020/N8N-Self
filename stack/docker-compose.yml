services:
  traefik:
    image: traefik:latest
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --log.level=DEBUG
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --api.dashboard=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ../secrets:/run/secrets:ro
    environment:
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=le
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    networks:
      - proxy

  caddy:
    image: caddy:2-alpine
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      # HTTP (80) route for ACME HTTP-01 challenges and redirects
      - traefik.http.routers.caddy-n8n.rule=Host(`n8n.${DOMAIN_NAME}`)
      - traefik.http.routers.caddy-n8n.entrypoints=web
      - traefik.http.services.caddy-n8n.loadbalancer.server.port=80
      # HTTPS (443) TCP passthrough for TLS-ALPN-01 and normal TLS
      - traefik.tcp.routers.caddy-n8n-tls.rule=HostSNI(`n8n.${DOMAIN_NAME}`)
      - traefik.tcp.routers.caddy-n8n-tls.entrypoints=websecure
      - traefik.tcp.routers.caddy-n8n-tls.tls.passthrough=true
      - traefik.tcp.services.caddy-n8n-tls.loadbalancer.server.port=443
    networks:
      - proxy
      - backend

  n8n-postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD_FILE=/run/secrets/n8n_db_password
    volumes:
      - n8n_pgdata:/var/lib/postgresql/data
      - ../secrets:/run/secrets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    networks:
      - backend

  n8n:
    image: n8nio/n8n:latest
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/n8n_db_password
      - N8N_HOST=n8n.${DOMAIN_NAME}
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - NODE_ENV=production
      - GENERIC_TIMEZONE=${TZ}
      - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
    volumes:
      - n8n_data:/home/node/.n8n
      - ../secrets:/run/secrets:ro
      - ../local-files:/files
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - n8n-postgres
    networks:
      - backend

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - backend

  pgvector:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=lightrag
      - POSTGRES_USER=lightrag
      - POSTGRES_PASSWORD_FILE=/run/secrets/pgvector_password
    volumes:
      - pgvectordata:/var/lib/postgresql/data
      - ../pgvector_init:/docker-entrypoint-initdb.d:ro
      - ../secrets:/run/secrets:ro
    networks:
      - backend

networks:
  proxy:
    name: proxy
    driver: bridge
  backend:
    name: backend
    driver: bridge

volumes:
  traefik_letsencrypt:
  n8n_pgdata:
  n8n_data:
  ollama_data:
  pgvectordata:
  caddy_data:
  caddy_config:
