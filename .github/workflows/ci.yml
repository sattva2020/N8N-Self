name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install & Build & Test
        run: |
          cd dashboard/frontend
          npm ci --prefer-offline
          npm run build --if-present
          npm test --if-present

      - name: CI pre-push mirror (typecheck + tests)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          cd dashboard/frontend
          npm ci --prefer-offline
          npm run typecheck --if-present
          npm test --if-present

  e2e-smoke:
    needs: build-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18.x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: |
          cd dashboard/frontend
          npm ci --prefer-offline

      - name: Install Playwright Browsers
        run: |
          cd dashboard/frontend
          npx playwright install --with-deps

      - name: Build frontend
        run: |
          cd dashboard/frontend
          npm run build --if-present

      - name: Start static server (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          PORT: 5177
          STRICT_PORT: '1'
        run: |
          cd dashboard/frontend
          nohup env PORT=$PORT npm run serve-dist > serve.log 2>&1 &
          # wait for the server port to be accepting connections
          for i in {1..20}; do
            if nc -z localhost $PORT; then
              echo "server is up"; break
            fi
            sleep 1
          done
        shell: bash

      - name: Start static server (Windows)
        if: runner.os == 'Windows'
        env:
          PORT: 5177
          STRICT_PORT: '1'
        run: |
          cd dashboard/frontend
          # start serve-dist with PORT env so server and Playwright agree
          Start-Process -NoNewWindow -FilePath npm -ArgumentList 'run','serve-dist' -Environment @{ PORT = $env:PORT; STRICT_PORT = $env:STRICT_PORT }
          Start-Sleep -Seconds 2
        shell: pwsh

      - name: Assert served port matches expected (repo-level)
        run: |
          cd dashboard/frontend
          # the simple server writes actual port to tmp/served-port when it starts
          if [ -f tmp/served-port ]; then
            served=$(cat tmp/served-port)
            echo "served-port=$served"
            if [ "$served" != "$PORT" ]; then
              echo "ERROR: served port ($served) != expected PORT ($PORT)" >&2
              cat serve.log || true
              exit 2
            fi
          else
            echo "WARNING: tmp/served-port not found; falling back to nc check"
            if ! nc -z localhost $PORT; then
              echo "ERROR: no server listening on $PORT" >&2
              cat serve.log || true
              exit 2
            fi
          fi
        shell: bash

      - name: Run Playwright smoke tests
        run: |
          cd dashboard/frontend
          mkdir -p playwright-report
          # run playwright with trace enabled, single worker and chromium project to capture detailed traces on crash
          npx playwright test --project=chromium --workers=1 --trace=on --reporter=list || true
        shell: bash

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}
          path: dashboard/frontend/playwright-report

  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Install commitlint
        run: |
          cd dashboard/frontend
          npm ci --prefer-offline
      - name: Run commitlint on PR
        if: github.event_name == 'pull_request'
        run: |
          echo "Running commitlint on pull request commits"
          cd dashboard/frontend
          # fetch the base branch to compute commit range reliably
          if [ -n "${{ github.event.pull_request.base.ref }}" ]; then
            git fetch --no-tags --prune --depth=1 origin ${{ github.event.pull_request.base.ref }} || true
            git fetch --no-tags --prune --depth=1 origin +refs/pull/${{ github.event.number }}/merge || true
            git log --pretty=format:%B origin/${{ github.event.pull_request.base.ref }}..FETCH_HEAD | npm run commitlint --silent || true
          else
            # fallback: run commitlint on FETCH_HEAD message
            git fetch --no-tags --prune --depth=1 origin +refs/pull/${{ github.event.number }}/merge || true
            git log --pretty=format:%B FETCH_HEAD | npm run commitlint --silent || true
          fi

  secret-scan:
    name: Secret scan (detect-secrets)
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install detect-secrets
        run: |
          python -m pip install --upgrade pip
          pip install --user detect-secrets
          echo "Add $HOME/.local/bin to PATH via GITHUB_PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run detect-secrets scan using baseline
        id: detect
        run: |
          # run scan and capture output; exit code non-zero indicates new findings
          set -o pipefail
          detect-secrets scan --baseline .secrets.baseline --all-files > detect_output.json || true
          echo "::warning::detect-secrets completed; results written to detect_output.json"
          cat detect_output.json | jq '.results | length' > detect_count.txt || true

      - name: Create issue when new secrets found
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let out = {};
            try {
              out = JSON.parse(fs.readFileSync('detect_output.json','utf8') || '{}');
            } catch (e) {
              core.warning('Could not parse detect_output.json');
              out = {};
            }
            const findings = Object.keys((out.results) || {});
            if (!findings || findings.length === 0) {
              core.info('No new secrets detected');
              return;
            }
            // create a gist with the full output for triage
            const gistResp = await github.rest.gists.create({
              files: { 'detect_output.json': { content: JSON.stringify(out, null, 2) } },
              public: false,
              description: `detect-secrets output for ${context.repo.owner}/${context.repo.repo} @ ${process.env.GITHUB_SHA}`,
            });
            const gistUrl = gistResp.data.html_url;
            const body = ['New potential secrets detected when running detect-secrets against the baseline:', '', ...findings.map(f => `- ${f}`), '', `Full output: ${gistUrl}`].join('\n');
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `detect-secrets: new potential secrets found (${findings.length})`,
              body,
            });
            core.setFailed('New potential secrets detected; see created issue for details');
